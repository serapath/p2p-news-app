const b4a = require('b4a')

/**

 * @param {string|number[]|Buffer} feedkey
 * @returns {Buffer|null}
 */
function parseFeedKey (feedkey) {
  let keyBuffer = null

  if (typeof feedkey === 'string') {
    if (feedkey.includes(',')) {
      const numbers = feedkey.split(',').map(n => parseInt(n.trim(), 10))
      keyBuffer = b4a.allocUnsafe(32)
      for (let i = 0; i < 32; i++) keyBuffer[i] = numbers[i]
    } else {
      keyBuffer = b4a.from(feedkey, 'hex')
    }
  } else if (Array.isArray(feedkey)) {
    keyBuffer = b4a.from(feedkey)
  } else if (b4a.isBuffer(feedkey)) {
    keyBuffer = feedkey
  }

  if (!keyBuffer || keyBuffer.length !== 32) {
    console.error('Invalid key length or format for feedkey:', feedkey)
    return null
  }
  return keyBuffer
}

module.exports = {
  parseFeedKey
}
