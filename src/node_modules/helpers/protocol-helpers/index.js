const c = require('compact-encoding')
const { parse_feed_key } = require('../parsing-helpers/index.js')

/**
 * Creates an identity exchange protocol handler
 * @param {Object} handlers 
 * @param {Function} handlers.on_protocol 
 * @param {Function} handlers.on_feedkey 
 * @param {Function} init_fn 
 * @param {Object} options 
 * @param {string} options.peer_mode 
 * @param {string} options.label 
 * @returns {Function} 
 */
function identity_exchange_protocol(handlers, init_fn, options = {}) {
  const { on_protocol, on_feedkey } = handlers
  const { peer_mode, label = '[peer]' } = options
  
  return function setup_protocol(mux) {
    let has_received_key = false

    const identity_channel = mux.createChannel({
      protocol: 'identity-exchange',
      onopen: () => {
        console.log(label, 'Identity channel opened')

        const protocol_msg = identity_channel.addMessage({
          encoding: c.json,
          onmessage: async (message) => {
            try {
              // Handle protocol message
              if (message.type === 'protocol') {
                console.log(label, `Peer ${message.data.name} is ${message.data.mode}`)
                
                // Create send function for handlers
                const send = (msg) => protocol_msg.send(msg)
                
                if (on_protocol) {
                  await on_protocol(message, send, peer_mode)
                }
              }

              // Handle feedkey message
              if (message.type === 'feedkey' && !has_received_key) {
                has_received_key = true
                
                const key_buffer = parse_feed_key(message.data)
                if (!key_buffer) return

                const hex_key = key_buffer.toString('hex')
                console.log(label, 'Received peer key:', hex_key.substring(0, 16) + '...')

                // Create send function for handlers
                const send = (msg) => protocol_msg.send(msg)
                
                if (on_feedkey) {
                  await on_feedkey({ key_buffer, hex_key, message }, send)
                }
              }
            } catch (err) {
              console.error(label, 'Error handling message:', err)
            }
          }
        })

        console.log(label, 'Sending our identity and core key')
      
        if (init_fn) {
          const send = (msg) => protocol_msg.send(msg)
          init_fn(send)
        }
      }
    })

    return identity_channel
  }
}

module.exports = {
  identity_exchange_protocol
}