const b4a = require('b4a')
const sodium = require('sodium-universal')

function create_noise_keypair ({ namespace, seed, name }) {
  const noise_seed = derive_seed(namespace, seed, name)
  const public_key = b4a.alloc(32)
  const secret_key = b4a.alloc(64)
  if (noise_seed) sodium.crypto_sign_seed_keypair(public_key, secret_key, noise_seed)
  else sodium.crypto_sign_keypair(public_key, secret_key)
  return { publicKey: public_key, secretKey: secret_key }
}

function derive_seed (primary_key, namespace, name) {
  if (!b4a.isBuffer(namespace)) namespace = b4a.from(namespace)
  if (!b4a.isBuffer(name)) name = b4a.from(name)
  if (!b4a.isBuffer(primary_key)) primary_key = b4a.from(primary_key)
  const out = b4a.alloc(32)
  sodium.crypto_generichash_batch(out, [namespace, name, primary_key])
  return out
}

module.exports = {
  create_noise_keypair,
  derive_seed
}
