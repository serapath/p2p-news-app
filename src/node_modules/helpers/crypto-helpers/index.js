const b4a = require('b4a')
const sodium = require('sodium')
const bip39 = require('bip39-mnemonic')

// Save/load functions for seedphrase
async function save(seedphrase, name = 'default') {
  if (typeof window !== 'undefined') {
    // Browser environment
    localStorage[`${name}-seedphrase`] = seedphrase
  } else {
    // Bare/Node environment
    const fs = require('bare-fs')
    await fs.promises.writeFile(`.${name}-seedphrase`, seedphrase, 'utf8')
  }
}

async function load(name = 'default') {
  if (typeof window !== 'undefined') {
    // Browser environment
    return localStorage[`${name}-seedphrase`] || null
  } else {
    // Bare/Node environment
    const fs = require('bare-fs')
    try {
      return await fs.promises.readFile(`.${name}-seedphrase`, 'utf8')
    } catch (err) {
      return null
    }
  }
}

function create_noise_keypair({ namespace, seed, name }) {
  const public_key = b4a.alloc(32)
  const secret_key = b4a.alloc(64)

  if (seed) {
    const noise_seed = derive_seed(seed, namespace, name)
    sodium.crypto_sign_seed_keypair(public_key, secret_key, noise_seed)
  } else {
    sodium.crypto_sign_keypair(public_key, secret_key)
  }

  return { publicKey: public_key, secretKey: secret_key }
}

function derive_seed(primary_key, namespace, name) {
  if (!b4a.isBuffer(namespace)) namespace = b4a.from(namespace)
  if (!b4a.isBuffer(name)) name = b4a.from(name)
  if (!b4a.isBuffer(primary_key)) primary_key = b4a.from(primary_key)

  const out = b4a.alloc(32)
  sodium.crypto_generichash_batch(out, [namespace, name, primary_key])
  return out
}

async function mnemonic_to_seed(mnemonic, passphrase = '') {
  const mnemonic_buffer = b4a.from(mnemonic, 'utf8')
  const salt_buffer = b4a.from('mnemonic' + passphrase, 'utf8')
  const seed_buffer = b4a.alloc(64)

  await sodium.extension_pbkdf2_sha512_async(
    seed_buffer,
    mnemonic_buffer,
    salt_buffer,
    2048,
    64
  )

  return seed_buffer
}

async function create_mnemonic_keypair(options = {}) {
  const mnemonic = options.mnemonic || bip39.generateMnemonic(128)
  const seed = await mnemonic_to_seed(mnemonic, options.passphrase || '')
  const master_seed = seed.subarray(0, 32)

  const keypair = create_noise_keypair({
    namespace: options.namespace || 'noisekeys',
    seed: master_seed,
    name: options.name || 'noise'
  })

  return {
    mnemonic,
    seed: master_seed,
    keypair
  }
}

async function delete_keypair(name) {
  const keystore = new KeyStore()
  await keystore.ready()
  
  // Delete mnemonic from localStorage
  localStorage.removeItem(`mnemonic-${name}`)
  
  // Delete from keystore
  try {
    await keystore.deleteKey('noisekeys', 'noise')
  } catch (err) {
    console.error('Error deleting from keystore:', err)
  }
  
  return true
}

module.exports = {
  create_noise_keypair,
  derive_seed,
  create_mnemonic_keypair,
  save,
  load,
  delete_keypair
}