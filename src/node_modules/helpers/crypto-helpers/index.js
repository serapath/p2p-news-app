const b4a = require('b4a')
const sodium = require('sodium')

let bip39
const isBrowser = (typeof window !== 'undefined')
if (isBrowser) {
  bip39 = require('bip39')
} else {
  bip39 = require('bip39-mnemonic')
}

// Save/load functions for seedphrase
async function save(seedphrase, name = 'default') {
  if (isBrowser) {
    localStorage[`${name}-seedphrase`] = seedphrase
  } else {
    const fs = require('bare-fs')
    await fs.promises.writeFile(`.${name}-seedphrase`, seedphrase, 'utf8')
  }
}

async function load(name = 'default') {
  if (isBrowser) {
    return localStorage[`${name}-seedphrase`] || null
  } else {
    const fs = require('bare-fs')
    try {
      return await fs.promises.readFile(`.${name}-seedphrase`, 'utf8')
    } catch (err) {
      return null
    }
  }
}

// Normalize mnemonicToSeed to always be async and return Buffer
async function mnemonicToSeed(mnemonic) {
  if (isBrowser) {
    // bip39: returns Buffer, sync
    return bip39.mnemonicToSeedSync(mnemonic)
  } else {
    // bip39-mnemonic: returns Promise<Buffer>
    return await bip39.mnemonicToSeed(mnemonic)
  }
}

// Create a keypair from a mnemonic (or generate one if not provided)
async function create_mnemonic_keypair(options = {}) {
  const mnemonic = options.mnemonic || bip39.generateMnemonic(128)
  const seed64 = await mnemonicToSeed(mnemonic)
  const seed32 = seed64.slice(0, 32)
  const publicKey = b4a.alloc(32)
  const secretKey = b4a.alloc(64)
  sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed32)
  return {
    mnemonic,
    seed: seed32,
    keypair: { publicKey, secretKey }
  }
}

module.exports = {
  create_mnemonic_keypair,
  save,
  load
}
