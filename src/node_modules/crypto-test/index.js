const { create_mnemonic_keypair } = require('../helpers/crypto-helpers/index.js')


const TEST_DATA = {
  mnemonic: 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about',
  passphrase: 'peer-test-12',
  namespace: 'noisekeys',
  name: 'noise'
}

// Simple hex converter for browsers
function toHex(buffer) {
  const bytes = new Uint8Array(buffer)
  return Array.from(bytes)
    .map(b => b.toString(16).padStart(2, '0'))
    .join('')
}

async function runTests() {
  console.log('Testing key pair generation')
  console.log('Environment:', typeof window !== 'undefined' ? 'Browser' : 'Node/Bare')
  console.log('=' .repeat(50))
  
  try {
    // Test 1: Deterministic keypair
    const result1 = await create_mnemonic_keypair(TEST_DATA)
    console.log('Test 1 - Deterministic')
    console.log('  Master seed:', toHex(result1.seed))
    console.log('  Public key: ', toHex(result1.keypair.publicKey))
    console.log('')
    
    // Test 2: Different namespace
    const result2 = await create_mnemonic_keypair({
      ...TEST_DATA,
      namespace: 'different-namespace'
    })
    console.log('Test 2 - Different namespace')
    console.log('  Public key: ', toHex(result2.keypair.publicKey))
    console.log('')
    
    // Test 3: Random generation
    const result3 = await create_mnemonic_keypair({
      namespace: TEST_DATA.namespace,
      name: TEST_DATA.name
    })
    console.log('Test 3 - Random generation')
    console.log('  Mnemonic:   ', result3.mnemonic.split(' ').slice(0, 3).join(' ') + '...')
    console.log('  Public key: ', toHex(result3.keypair.publicKey))
    console.log('')
    
    console.log('All tests passed!')
    return true
    
  } catch (error) {
    console.error('Test failed:', error.message)
    return false
  }
}


runTests().then(success => {
  if (typeof process !== 'undefined' && process.exit) {
    process.exit(success ? 0 : 1)
  }
}).catch(console.error)